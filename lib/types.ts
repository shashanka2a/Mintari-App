// Generated types based on Prisma schema
// These types are automatically generated by Prisma, but included here for reference

export type User = {
  id: string
  email: string
  username: string | null
  fullName: string | null
  avatarUrl: string | null
  walletAddress: string | null
  onboardingCompleted: boolean
  isActive: boolean
  createdAt: Date
  updatedAt: Date
  lastLogin: Date | null
}

export type Upload = {
  id: string
  userId: string
  originalFilename: string
  filePath: string
  fileSize: bigint
  mimeType: string
  imageWidth: number | null
  imageHeight: number | null
  uploadStatus: UploadStatus
  errorMessage: string | null
  createdAt: Date
  updatedAt: Date
}

export type AIGeneration = {
  id: string
  userId: string
  uploadId: string
  generationType: GenerationType
  prompt: string | null
  generationStatus: GenerationStatus
  progressPercentage: number
  errorMessage: string | null
  processingStartedAt: Date | null
  processingCompletedAt: Date | null
  createdAt: Date
  updatedAt: Date
}

export type GeneratedImage = {
  id: string
  generationId: string
  imageUrl: string
  thumbnailUrl: string | null
  imageWidth: number | null
  imageHeight: number | null
  fileSize: bigint | null
  generationVariant: number
  isSelected: boolean
  createdAt: Date
}

export type Collection = {
  id: string
  userId: string
  title: string
  description: string | null
  isPublic: boolean
  createdAt: Date
  updatedAt: Date
}

export type CollectionItem = {
  id: string
  collectionId: string
  uploadId: string
  generatedImageId: string
  title: string
  description: string | null
  tags: string[]
  isFavorite: boolean
  createdAt: Date
  updatedAt: Date
}

export type NFTMinting = {
  id: string
  userId: string
  generatedImageId: string
  collectionItemId: string | null
  mintStatus: MintStatus
  tokenId: string | null
  contractAddress: string | null
  transactionHash: string | null
  gasFee: number | null
  mintPrice: number | null
  walletAddress: string | null
  metadataUrl: string | null
  errorMessage: string | null
  mintedAt: Date | null
  createdAt: Date
  updatedAt: Date
}

export type PhysicalOrder = {
  id: string
  userId: string
  generatedImageId: string
  collectionItemId: string | null
  orderStatus: OrderStatus
  frameType: string
  frameSize: string
  quantity: number
  unitPrice: number
  totalPrice: number
  shippingAddress: any // JSON type
  paymentMethodId: string | null
  paymentStatus: PaymentStatus
  trackingNumber: string | null
  estimatedDelivery: Date | null
  actualDelivery: Date | null
  createdAt: Date
  updatedAt: Date
}

export type PaymentMethod = {
  id: string
  userId: string
  paymentType: PaymentType
  provider: string | null
  lastFourDigits: string | null
  cardBrand: string | null
  isDefault: boolean
  isActive: boolean
  encryptedDetails: any | null // JSON type
  createdAt: Date
  updatedAt: Date
}

export type UserPreferences = {
  id: string
  userId: string
  defaultGenerationStyle: string
  autoSaveToCollection: boolean
  emailNotifications: boolean
  pushNotifications: boolean
  marketingEmails: boolean
  themePreference: string
  language: string
  createdAt: Date
  updatedAt: Date
}

export type AppAnalytics = {
  id: string
  userId: string | null
  eventType: string
  screenName: string | null
  eventData: any | null // JSON type
  sessionId: string | null
  userAgent: string | null
  ipAddress: string | null
  createdAt: Date
}

export type SystemSetting = {
  id: string
  settingKey: string
  settingValue: any // JSON type
  description: string | null
  isPublic: boolean
  createdAt: Date
  updatedAt: Date
}

// Enums
export enum UploadStatus {
  PENDING = 'PENDING',
  PROCESSING = 'PROCESSING',
  COMPLETED = 'COMPLETED',
  FAILED = 'FAILED'
}

export enum GenerationType {
  GHIBLI = 'GHIBLI',
  STUDIO_GHIBLI = 'STUDIO_GHIBLI',
  CUSTOM_STYLE = 'CUSTOM_STYLE'
}

export enum GenerationStatus {
  PENDING = 'PENDING',
  PROCESSING = 'PROCESSING',
  COMPLETED = 'COMPLETED',
  FAILED = 'FAILED'
}

export enum MintStatus {
  PENDING = 'PENDING',
  MINTING = 'MINTING',
  COMPLETED = 'COMPLETED',
  FAILED = 'FAILED'
}

export enum OrderStatus {
  PENDING = 'PENDING',
  PROCESSING = 'PROCESSING',
  SHIPPED = 'SHIPPED',
  DELIVERED = 'DELIVERED',
  CANCELLED = 'CANCELLED'
}

export enum PaymentStatus {
  PENDING = 'PENDING',
  PAID = 'PAID',
  FAILED = 'FAILED',
  REFUNDED = 'REFUNDED'
}

export enum PaymentType {
  CREDIT_CARD = 'CREDIT_CARD',
  PAYPAL = 'PAYPAL',
  CRYPTO_WALLET = 'CRYPTO_WALLET',
  BANK_TRANSFER = 'BANK_TRANSFER'
}

// Extended types with relations
export type UserWithRelations = User & {
  uploads?: Upload[]
  aiGenerations?: AIGeneration[]
  collections?: Collection[]
  nftMintings?: NFTMinting[]
  physicalOrders?: PhysicalOrder[]
  paymentMethods?: PaymentMethod[]
  preferences?: UserPreferences
}

export type UploadWithRelations = Upload & {
  user?: User
  aiGenerations?: AIGeneration[]
  collectionItems?: CollectionItem[]
}

export type AIGenerationWithRelations = AIGeneration & {
  user?: User
  upload?: Upload
  generatedImages?: GeneratedImage[]
}

export type GeneratedImageWithRelations = GeneratedImage & {
  generation?: AIGeneration
  nftMintings?: NFTMinting[]
  physicalOrders?: PhysicalOrder[]
  collectionItems?: CollectionItem[]
}

export type CollectionWithRelations = Collection & {
  user?: User
  items?: CollectionItem[]
}

export type CollectionItemWithRelations = CollectionItem & {
  collection?: Collection
  upload?: Upload
  generatedImage?: GeneratedImage
  nftMintings?: NFTMinting[]
  physicalOrders?: PhysicalOrder[]
}

// API Response types
export type ApiResponse<T> = {
  data?: T
  error?: string
  message?: string
}

export type PaginatedResponse<T> = {
  data: T[]
  pagination: {
    page: number
    limit: number
    total: number
    totalPages: number
  }
}

// Form types
export type CreateUserData = {
  email: string
  username?: string
  fullName?: string
  avatarUrl?: string
  walletAddress?: string
}

export type UpdateUserData = {
  username?: string
  fullName?: string
  avatarUrl?: string
  walletAddress?: string
  onboardingCompleted?: boolean
}

export type CreateCollectionData = {
  title: string
  description?: string
  isPublic?: boolean
}

export type CreateCollectionItemData = {
  collectionId: string
  uploadId: string
  generatedImageId: string
  title: string
  description?: string
  tags?: string[]
}

export type CreatePhysicalOrderData = {
  generatedImageId: string
  collectionItemId?: string
  frameType: string
  frameSize: string
  quantity?: number
  shippingAddress: {
    name: string
    address1: string
    address2?: string
    city: string
    state: string
    zipCode: string
    country: string
  }
  paymentMethodId?: string
}

export type CreateNFTMintingData = {
  generatedImageId: string
  collectionItemId?: string
  walletAddress: string
  mintPrice?: number
}

// Analytics types
export type AnalyticsEvent = {
  eventType: string
  screenName?: string
  eventData?: Record<string, any>
}

export type ScreenViewEvent = AnalyticsEvent & {
  eventType: 'screen_view'
  screenName: string
  eventData?: {
    previousScreen?: string
    duration?: number
  }
}

export type ButtonClickEvent = AnalyticsEvent & {
  eventType: 'button_click'
  eventData: {
    buttonName: string
    screenName: string
    action?: string
  }
}

export type GenerationEvent = AnalyticsEvent & {
  eventType: 'generation_started' | 'generation_completed' | 'generation_failed'
  eventData: {
    generationId: string
    generationType: GenerationType
    uploadId: string
    duration?: number
    errorMessage?: string
  }
}

// File upload types
export type FileUploadData = {
  file: File
  userId: string
  onProgress?: (progress: number) => void
}

export type UploadResult = {
  id: string
  url: string
  filename: string
  size: number
  mimeType: string
  dimensions?: {
    width: number
    height: number
  }
}
